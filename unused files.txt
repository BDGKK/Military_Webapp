// Use these codes in the case of unclear CORS errors or Content Security

const {expressCspHeader, INLINE, NONE, SELF} = require('express-csp-header');

app.use(expressCspHeader({
    directives: {
        'img-src': [NONE]
    }
}));

// Avoid CORS errors
app.use(expressCspHeader({
    directives: {
        'default-src': [SELF],
        'script-src': [SELF, INLINE],
        'style-src': [SELF],
        'img-src': [SELF],
        'worker-src': [NONE],
        'block-all-mixed-content': true
    }
}));

/*
Chatbot code but with openai API
const { Configuration, OpenAIApi } = require("openai");
const express = require('express');
require('dotenv').config();

// Initialize the Router and display the frontend at the root URL (localhost:<port>/)
const router = express.Router();
router.use('/', express.static('./home-page'));

// Initialize the openai instance
const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

let humanMessage = {};
let aiMessage = {};

// Message to send to the frontend
router.get('/homepage/messages', (req, res) => {
    res.status(200).send(aiMessage);
});

// Message to get from the frontend
router.post('/homepage/userinput', async(req, res) => {
    humanMessage = req.body.humanMessage;

    if (!humanMessage) {
        res.status(404).send({
            message: 'Please enter a message'
        });
    }

    // Input the user's message to the AI and get the AI's response
    const prompt = "The following is a conversation with an AI assistant. " +
        `The assistant gives basic responses to basic input.\n\nHuman: ${humanMessage}\nAI:`;
    const response = await openai.createCompletion({
        model: "text-davinci-003",
        prompt,
        max_tokens: 450,
        temperature: 0.5
    });
    
    aiMessage = {message: response.data.choices[0].text};

    res.status(200).send({
        message: "Posted successfully"
    });
});

module.exports = router;
*/